{"version":3,"sources":["webpack:///src/app/login/login.module.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.component.ts"],"names":["routes","path","component","LoginModule","declarations","imports","forChild","LoginComponent","route","router","authenticationService","spinnerService","loading","submitted","error","currentUserValue","navigate","returnUrl","snapshot","queryParams","loginformData","console","log","show","login","username","password","pipe","subscribe","data","hide","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,UAAMA,MAAM,GAAW,CACrB;AAAEC,YAAI,EAAE,EAAR;AAAYC,iBAAS,EAAE;AAAvB,OADqB,CAAvB;;UAWaC,WAAW;AAAA;AAAA,O;;AAAXA,iBAAW,6DAPvB,+DAAS;AACRC,oBAAY,EAAE,CAAC,+DAAD,CADN;AAERC,eAAO,EAAE,CACP,4DADO,EACM,0DADN,EACkB,4DADlB,EAEP,6DAAaC,QAAb,CAAsBN,MAAtB,CAFO;AAFD,OAAT,CAOuB,GAAXG,WAAW,CAAX;;;;;;;;;;;;;;;;AClBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCSFI,cAAc;AAOvB,gCACYC,KADZ,EAEYC,MAFZ,EAGYC,qBAHZ,EAIWC,cAJX,EAI4C;AAAA;;AAHhC,eAAAH,KAAA,GAAAA,KAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,qBAAA,GAAAA,qBAAA;AACD,eAAAC,cAAA,GAAAA,cAAA;AATX,eAAAC,OAAA,GAAU,KAAV;AACA,eAAAC,SAAA,GAAY,KAAZ;AAEA,eAAAC,KAAA,GAAQ,EAAR,CAM4C,CAExC;;AACA,cAAI,KAAKJ,qBAAL,CAA2BK,gBAA/B,EAAiD;AAC7C,iBAAKN,MAAL,CAAYO,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACH;AACJ;;AAjBsB;AAAA;AAAA,iBAmBvB,oBAAW;AACP;AACA,iBAAKC,SAAL,GAAiB,KAAKT,KAAL,CAAWU,QAAX,CAAoBC,WAApB,CAAgC,WAAhC,KAAgD,GAAjE;AACH;AAtBsB;AAAA;AAAA,iBAwBvB,iBAAQC,aAAR,EAA0B;AAAA;;AACtBC,mBAAO,CAACC,GAAR,CAAYF,aAAZ;AACA,iBAAKT,cAAL,CAAoBY,IAApB;AACA,iBAAKb,qBAAL,CAA2Bc,KAA3B,CAAiCJ,aAAa,CAACK,QAA/C,EAAyDL,aAAa,CAACM,QAAvE,EACCC,IADD,CACM,8DADN,EAECC,SAFD,CAGI,UAAAC,IAAI,EAAI;AACJ,mBAAI,CAACpB,MAAL,CAAYO,QAAZ,CAAqB,CAAC,OAAD,CAArB;AACH,aALL,EAMI,UAAAF,KAAK,EAAI;AACL,mBAAI,CAACA,KAAL,GAAaA,KAAb;;AACA,mBAAI,CAACH,cAAL,CAAoBmB,IAApB;AACH,aATL;AAUH;AArCsB;;AAAA;AAAA,S;;;;gBARV;;gBAAR;;gBAIA;;gBACA;;;;AAGIvB,oBAAc,6DAD1B,gEAAU;AAAEwB,gBAAQ,EAAR;AAAF,OAAV,CAC0B,GAAdxB,cAAc,CAAd","file":"login-login-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './login.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: LoginComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,FormsModule,NgxSpinnerModule,\r\n    RouterModule.forChild(routes)\r\n  ]\r\n})\r\nexport class LoginModule { }\r\n","export default \"\\r\\n\\r\\n  <!-- <h1 style=\\\"text-align: center;color: #2A88AD; margin-top: 20px;\\\">TIBSmartMigrator</h1><p style=\\\"text-align: center;color: #2A88AD; padding: 10px;\\\">Utility to migrate BW5.x code to BW6.x/CE. This utility has optionaly ability to Clean Up Code, convert RV to EMS/HTTP, Folder Reorganization of BW6.x/CE project. This tool also has features of Analyzing the BW5.x code for migration compatibility and Generating BW6.x/CE deployemnt artifact</p> -->\\r\\n  <div class=\\\"container register\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-3 register-left\\\">\\r\\n            <!-- <img src=\\\"https://image.ibb.co/n7oTvU/logo_white.png\\\" alt=\\\"\\\"/> -->\\r\\n            <img src=\\\"assets/user_icon.png\\\"/>\\r\\n            <h3>TIBSmartMigrator</h3>\\r\\n            <!-- <p>Utility to migrate BW5.x code to BW6.x/CE. This utility has optionaly ability to Clean Up Code, convert RV to EMS/HTTP, Folder Reorganization of BW6.x/CE project. This tool also has features of Analyzing the BW5.x code for migration compatibility and Generating BW6.x/CE deployemnt artifact</p> -->\\r\\n            <!-- <input type=\\\"submit\\\" name=\\\"\\\" value=\\\"Login\\\"/><br/> -->\\r\\n        </div>\\r\\n        <div class=\\\"col-md-9 register-right\\\">\\r\\n            <div class=\\\"tab-content\\\" id=\\\"myTabContent\\\">\\r\\n                <div class=\\\"tab-pane fade show active\\\" id=\\\"home\\\" role=\\\"tabpanel\\\" aria-labelledby=\\\"home-tab\\\">\\r\\n                  <h3 class=\\\"register-heading\\\">LOGIN</h3> \\r\\n                  <form #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"doLogin(loginForm.value)\\\" class=\\\"row register-form\\\">\\r\\n                    <div class=\\\"col-md-12\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username *\\\" name=\\\"username\\\" ngModel required/>\\r\\n                        </div>\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password *\\\" name=\\\"password\\\" ngModel required/>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-md-8\\\">\\r\\n                        <button [disabled]=\\\"loginForm.form.invalid\\\" type=\\\"submit\\\" class=\\\"btn btn-lg btn-block btnRegister\\\">Login</button>\\r\\n                    </div>\\r\\n                  </form>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<ngx-spinner bdColor=\\\"rgba(51, 51, 51, 0.8)\\\" template=\\\"<img src='assets/spinner.gif' />\\\"><br>\\r\\n  <p style=\\\"color: white; text-align: center;margin-top: 130px;\\\">Please Wait... </p>  \\r\\n</ngx-spinner> \\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AuthenticationService } from '../_services';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\n\r\n@Component({ templateUrl: 'login.component.html' })\r\nexport class LoginComponent implements OnInit {\r\n    loginForm: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    returnUrl: string;\r\n    error = '';\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private authenticationService: AuthenticationService,\r\n        public spinnerService: NgxSpinnerService\r\n    ) { \r\n        // redirect to home if already logged in\r\n        if (this.authenticationService.currentUserValue) { \r\n            this.router.navigate(['/login']);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        // get return url from route parameters or default to '/'\r\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n    }\r\n\r\n    doLogin(loginformData: any){\r\n        console.log(loginformData);\r\n        this.spinnerService.show();\r\n        this.authenticationService.login(loginformData.username, loginformData.password)\r\n        .pipe(first())\r\n        .subscribe(\r\n            data => {\r\n                this.router.navigate(['/home']);\r\n            },\r\n            error => {\r\n                this.error = error;\r\n                this.spinnerService.hide();\r\n            });\r\n    }\r\n}\r\n"]}